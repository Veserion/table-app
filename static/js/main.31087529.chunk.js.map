{"version":3,"sources":["components/Textarea/index.tsx","components/SelectedUser/index.tsx","components/Icons.tsx","services/notificationsService.ts","components/Dashboard/index.tsx","components/Search/index.tsx","components/App/index.tsx","stores/SubStore.ts","stores/DataStore.ts","vars.ts","index.tsx","stores/RootStore.ts","utils/localStore.ts"],"names":["Textarea","styled","textarea","Root","div","Row","StyledUser","this","props","user","lastName","firstName","description","address","streetAddress","city","state","zip","css","descriptionStyle","value","readOnly","React","Component","ErrorIcn","WarningOutlined","style","color","SuccessIcn","CheckSquareOutlined","getIconByType","type","openNotification","message","notification","open","icon","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","Dashboard","inject","observer","isOpen","handleDataSourceChange","target","dataStore","changeDataSource","showModal","setState","handleCancel","onFinish","values","id","userData","length","push","notificationsService","dataSource","size","onClick","Group","onChange","Button","title","visible","footer","onCancel","name","Item","label","rules","TextArea","offset","htmlType","Search","lifeSearching","handleChangeLifeSearching","checked","handleChange","e","placeholder","enterButton","onSearch","columns","dataIndex","key","defaultSortOrder","sorter","a","b","phone","App","searchingValue","selectedUser","handleChangeSearchValue","handleChangeSelectedUser","selectedRowKeys","selectedRows","data","map","loading","expandable","expandedRowRender","findDataRow","rowSelection","str","filter","row","Object","some","val","String","includes","SubStore","rootStore","DataStore","initState","Array","isArray","fetchData","setTimeout","serverData","observable","action","computed","currentDataSource","url","axios","get","timeout","toString","mobXStore","serialize","JSON","parse","localStorage","getItem","undefined","error","console","log","loadState","autorun","dir","setItem","stringify","delay","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31087529.chunk.js","sourcesContent":["import styled from '@emotion/styled'\n\nconst Textarea = styled.textarea`\nresize: none;\nbox-shadow: none;\nborder: 1px solid #d9d9d9;\nborder-radius: 2px;\noutline: none;\nmargin: 8px 0;\npadding: 5px\n`\n\nexport default Textarea","/** @jsx jsx */\nimport React from 'react';\nimport styled from '@emotion/styled'\nimport { css, jsx } from '@emotion/core'\nimport Textarea from '../Textarea'\nimport { TData } from '../../stores/DataStore';\nconst Root = styled.div`\ndisplay: flex;\nflex-direction: column;\n`\n\nconst Row = styled.div`\ndisplay: flex;\npadding-bottom:8px;\n`\n\n\ninterface IProps {\n    user: TData | null\n}\n\nexport default class StyledUser extends React.Component<IProps> {\n\n    render() {\n        if (this.props.user === null) return null\n        const { user: { lastName, firstName, description, address } } = this.props\n        const { streetAddress, city, state, zip } = address\n\n        return <Root>\n            <Row>Выбран пользователь:&nbsp;<b>{`${firstName} ${lastName}`}</b></Row>\n            <Row css={descriptionStyle}>\n                Описание:<Textarea value={description} readOnly /></Row>\n            <Row>Адрес проживания:&nbsp; <b>{streetAddress}</b></Row>\n            <Row>Город:&nbsp; <b>{city}</b></Row>\n            <Row>Провинция/штат:&nbsp; <b>{state}</b></Row>\n            <Row>Индекс:&nbsp; <b>{zip}</b></Row>\n        </Root>\n    }\n};\n\nconst descriptionStyle = css`\nflex-direction: column\n`;","import React from 'react';\nimport { WarningOutlined, CheckSquareOutlined } from '@ant-design/icons';\n\nexport const ErrorIcn = () => <WarningOutlined style={{ color: '#ff4d4f' }} />\nexport const SuccessIcn = () => <CheckSquareOutlined style={{ color: '#108ee9' }} />\n\nexport const getIconByType = (type?: 'success' | 'error') => {\n    switch (type) {\n        case 'error':\n            return <ErrorIcn />\n        case 'success':\n            return <SuccessIcn />\n    }\n    return null\n}\n","import { notification } from \"antd\";\nimport { getIconByType } from \"../components/Icons\";\n\nclass NotificationsService {\n  openNotification = (\n    message: string,\n    description: string,\n    type?: \"error\" | \"success\"\n  ) => notification.open({ message, description, icon: getIconByType(type) });\n  \n}\n\nexport default new NotificationsService();\n","import React from 'react';\nimport { Button, Radio, Modal, Form, Input } from 'antd';\nimport styled from '@emotion/styled'\nimport { DataStore, TData } from '../../stores/DataStore';\nimport { inject, observer } from 'mobx-react';\nimport { RadioChangeEvent } from 'antd/lib/radio';\nimport notificationsService from '../../services/notificationsService';\nconst Root = styled.div`\npadding: 20px 0 ;\ndisplay: flex;\nalign-items: center;\nmargin: 0 -20px;\n& > * {\n    margin: 0 20px;\n}\n`\n\ninterface IProps {\n    dataStore?: DataStore\n}\n\n\ninterface IState {\n    isOpen: boolean\n}\n\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\n\nconst validateMessages = {\n    required: 'This field is required!',\n    types: { email: 'Not a validate email!', },\n};\n\n@inject('dataStore')\n@observer\nexport default class Dashboard extends React.Component<IProps, IState> {\n\n    state = { isOpen: false }\n\n    handleDataSourceChange = ({ target: { value } }: RadioChangeEvent) =>\n        this.props.dataStore!.changeDataSource(value)\n\n    showModal = () => this.setState({ isOpen: true });\n\n    handleCancel = () => this.setState({ isOpen: false });\n\n    onFinish = (values: Omit<TData, 'id'>) => {\n        const id = -(this.props.dataStore!.userData.length + 1)\n        this.props.dataStore!.userData.push({ ...values, id })\n        this.handleCancel()\n        notificationsService.openNotification('Success', 'User was added succesfully', 'success')\n    };\n\n    render() {\n        const { dataSource } = this.props.dataStore!\n        return <Root>\n\n            <Button type=\"primary\" size=\"large\" onClick={this.showModal}>New user</Button>\n\n            <Radio.Group value={dataSource} onChange={this.handleDataSourceChange}>\n                <Radio.Button value=\"long\">The large data source</Radio.Button>\n                <Radio.Button value=\"short\">The small data source</Radio.Button>\n            </Radio.Group>\n            <Modal\n                title=\"New user\"\n                visible={this.state.isOpen}\n                footer={null}\n                onCancel={this.handleCancel}\n            >\n                <Form {...layout} name=\"nest-messages\" onFinish={this.onFinish as (values: any) => void} validateMessages={validateMessages}>\n                    <Form.Item name={'firstName'} label=\"First name\" rules={[{ required: true }]}><Input /></Form.Item>\n                    <Form.Item name={'lastName'} label=\"Last name\" rules={[{ required: true }]}><Input /></Form.Item>\n                    <Form.Item name={'email'} label=\"Email\" rules={[{ type: 'email', required: true }]}><Input /></Form.Item>\n                    <Form.Item name={'phone'} label=\"Phone Number\" rules={[{ required: true }]}><Input /></Form.Item>\n                    <Form.Item name={['address', 'streetAddress']} label=\"Street address\" rules={[{ required: true }]}><Input /></Form.Item>\n                    <Form.Item name={['address', 'city']} label=\"city\" rules={[{ required: true }]}><Input /></Form.Item>\n                    <Form.Item name={['address', 'state']} label=\"state\" rules={[{ required: true }]}><Input /></Form.Item>\n                    <Form.Item name={['address', 'zip']} label=\"zip\" rules={[{ required: true }]}><Input /></Form.Item>\n                    <Form.Item name={'description'} label=\"Description\" rules={[{ required: true }]}><Input.TextArea /></Form.Item>\n                    <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n                        <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </Root >\n    }\n};\n\n\n","import React from 'react';\nimport { Input, Checkbox } from 'antd';\nimport styled from '@emotion/styled'\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\n\nconst Root = styled.div`\nmargin:  -10px 0 ;\n& > * {\n    margin: 10px 0 ;\n};\npadding-bottom: 40px;\n`\ninterface IProps {\n    value: string\n    onChange: (s: string) => void\n}\n\n\ninterface IState {\n    lifeSearching: boolean\n}\n\n\n\nexport default class Search extends React.Component<IProps, IState> {\n\n    state = {\n        lifeSearching: false\n    }\n\n    handleChangeLifeSearching = ({ target: { checked: lifeSearching } }: CheckboxChangeEvent) =>\n        this.setState({ lifeSearching })\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => this.props.onChange(e.target.value)\n\n    render() {\n        const { value, onChange } = this.props\n        const { lifeSearching } = this.state\n\n        return <Root>\n            {lifeSearching\n                ? <Input\n                    placeholder=\"input search text\"\n                    value={value}\n                    onChange={this.handleChange}\n                />\n                : <Input.Search\n                    enterButton=\"Search\"\n                    placeholder=\"input search text\"\n                    onSearch={onChange}\n                />\n            }\n            <Checkbox onChange={this.handleChangeLifeSearching}>Life searching mode</Checkbox>\n        </Root >\n    }\n};\n\n","import React from 'react';\nimport StyledUser from '../SelectedUser'\nimport { Table, Input } from 'antd';\nimport styled from '@emotion/styled'\nimport { DataStore, TData } from '../../stores/DataStore';\nimport { inject, observer } from 'mobx-react';\nimport Dashboard from '../Dashboard';\nimport Search from '../Search';\n\nconst Root = styled.div`\npadding: 60px;\n`\n\nconst columns = [\n  {\n    title: \"id\", dataIndex: 'id', key: 'id', defaultSortOrder: 'descend' as 'descend',\n    sorter: (a: TData, b: TData) => a.id - b.id\n  },\n  {\n    title: \"firstName\", dataIndex: 'firstName', key: 'firstName', sorter: (a: TData, b: TData) => a.firstName.length - b.firstName.length\n  },\n  {\n    title: \"lastName\", dataIndex: 'lastName', key: 'lastName', sorter: (a: TData, b: TData) => a.lastName.length - b.lastName.length\n  },\n  {\n    title: \"email\", dataIndex: 'email', key: 'email'\n  },\n  {\n    title: \"phone\", dataIndex: 'phone', key: 'phone', sorter: (a: TData, b: TData) => a.phone.length - b.phone.length\n  },\n  // { title: \"address\", dataIndex: 'address', key: 'address', render: ({ streetAddress, city, state, zip }: TAddress) => <a>{streetAddress + ' ' + city  + ' ' + state + ' ' + zip}</a> },\n  // {\n  //   title: \"description\", dataIndex: 'description', key: 'description'\n  // },\n  // {\n  //   title: 'Name', dataIndex: 'name', key: 'name',\n  //   sorter: (a: any, b: any) => a.name.length - b.name.length,\n  //   sortDirections: ['descend' as 'descend'],\n  // },\n\n  // {\n  //   title: 'Age', dataIndex: 'age', key: 'age',\n  //   defaultSortOrder: 'descend' as 'descend',\n  //   sorter: (a: any, b: any) => a.age - b.age,\n  // },\n  // { title: 'Address', dataIndex: 'address', key: 'address' },\n  // {\n  //   title: 'Action',\n  //   dataIndex: '',\n  //   key: 'x',\n  //   render: () => <a>Delete</a>,\n  // },\n];\n\ninterface IProps {\n  dataStore?: DataStore\n}\n\n\ninterface IState {\n  searchingValue: string\n  selectedUser: TData | null\n}\n\n\n@inject('dataStore')\n@observer\nexport default class App extends React.Component<IProps, IState> {\n\n  state = {\n    searchingValue: '',\n    selectedUser: null\n  }\n\n  handleChangeSearchValue = (searchingValue: string) =>\n    this.setState({ searchingValue })\n\n  handleChangeSelectedUser = (selectedRowKeys: (string | number)[], selectedRows: TData[]) =>\n    selectedRows.length > 0 && this.setState({ selectedUser: selectedRows[0] })\n\n\n  render() {\n    const { searchingValue, selectedUser } = this.state\n    const data = this.props.dataStore!.data\n      ? this.props.dataStore!.data.map((data: TData, key: number) => ({ ...data, key }))\n      : [];\n\n    return <Root>\n      <Dashboard />\n      <Search value={searchingValue} onChange={this.handleChangeSearchValue} />\n      <Table\n        columns={columns}\n        loading={this.props.dataStore!.data === null}\n        expandable={{ expandedRowRender: (user: TData) => <StyledUser user={user} /> }}\n        dataSource={searchingValue === '' ? data : findDataRow(data, searchingValue)}\n        rowSelection={{ type: 'radio', onChange: this.handleChangeSelectedUser }}\n      />\n      <StyledUser user={selectedUser} />\n    </Root >\n  }\n};\n\n\nconst findDataRow = (data: TData[], str: string) =>\n  (data || []).filter(row => Object.values(row).some((val) => String(val).includes(str)))\n","import { RootStore } from './index';\n\nclass SubStore {\n    constructor(public rootStore: RootStore) {}\n}\n\nexport {\n    SubStore\n};\n","import { RootStore } from \"./index\";\nimport { SubStore } from \"./SubStore\";\nimport { observable, action, computed } from \"mobx\";\nimport { longDataUrl, shortDataUrl } from \"../vars\";\nimport notificationsService from \"../services/notificationsService\";\nimport axios from \"axios\";\n\nexport type TAddress = {\n  streetAddress: string;\n  city: string;\n  state: string;\n  zip: string;\n};\n\nexport type TData = {\n  id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  address: TAddress;\n  description: string;\n};\n\nexport type TDataSource = \"long\" | \"short\";\n\nexport const isDataSource = (str: string): str is TDataSource =>\n  [\"long\", \"short\"].includes(str);\n\nexport class DataStore extends SubStore {\n  @observable serverData: TData[] | null = null;\n  @observable userData: TData[] = [];\n  @observable dataSource: TDataSource = \"short\";\n\n  @action changeDataSource = async (dataSource: TDataSource) => {\n    this.dataSource = dataSource;\n    this.serverData = null;\n    await this.fetchData();\n  };\n\n  @computed get data(): TData[] | null {\n    return this.serverData ? [...this.serverData, ...this.userData] : null;\n  }\n\n  @action fetchData = async () => {\n    try {\n      const currentDataSource = this.dataSource;\n      const url = currentDataSource === \"long\" ? longDataUrl : shortDataUrl;\n      const data = (await axios.get(url, { timeout: 15 * 1e3 })).data;\n      if (this.dataSource === currentDataSource) this.serverData = data;\n    } catch (e) {\n      notificationsService.openNotification(\n        \"Fetch data error\",\n        e.toString(),\n        \"error\"\n      );\n    }\n  };\n\n  constructor(rootStore: RootStore, initState: any) {\n    super(rootStore);\n\n    if (initState) {\n      if (Array.isArray(initState.userData)) this.userData = initState.userData;\n      if (isDataSource(initState.dataSource))\n        this.dataSource = initState.dataSource;\n    }\n\n    this.fetchData();\n    setTimeout(this.fetchData, 1e5);\n  }\n}\n","export const shortDataUrl =\n  \"https://cors-anywhere.herokuapp.com/http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}\";\nexport const longDataUrl =\n  \"https://cors-anywhere.herokuapp.com/http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}\";\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'antd/dist/antd.css';\nimport { autorun } from 'mobx';\nimport { RootStore } from './stores';\nimport { loadState, saveState } from './utils/localStore';\nimport { Provider } from 'mobx-react';\n\n\n// Store init\nconst initState = loadState();\nconst mobXStore = new RootStore(initState);\nautorun(() => {\n    console.dir(mobXStore);\n    saveState(mobXStore.serialize());\n}, { delay: 1000 });\n\nReactDOM.render(<Provider {...mobXStore}><App /></Provider>, document.getElementById('root'));","import { DataStore } from \"./index\";\n\nclass RootStore {\n  public dataStore: DataStore;\n\n  constructor(initState: any) {\n    this.dataStore = new DataStore(\n      this,\n      initState && initState.dataStore ? initState.dataStore : null\n    );\n  }\n\n  public serialize = () => ({\n    dataStore: {\n      userData: this.dataStore.userData,\n      dataSource: this.dataStore.dataSource\n    }\n  });\n}\n\nexport { RootStore };\n","\nexport const loadState = (): any | undefined => {\n    try {\n        const state = JSON.parse(localStorage.getItem('store') as string);\n        return state || undefined;\n\n    } catch (error) {\n        console.log(error);\n        return undefined;\n    }\n\n};\nexport const saveState = (state: any): void => {\n    localStorage.setItem('store', JSON.stringify(state));\n};\n"],"sourceRoot":""}